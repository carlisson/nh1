#!/bin/bash
# @file nh1
# @brief Simple shell end user swiss army knife (toolkit) 
# @description
#     A set of tools for shell.
#      * 1app - AppImage package manager
#      * audio, backup, network and rpg tools
#      * 1canva - create images from SVG templates
#      * other things
# Documentation for shdoc - https://github.com/reconquest/shdoc

shopt -s expand_aliases

# Global variables
_1VERSION=1.1n7

_1MODULES=(app audio backup canva cron misc network rpg)

_1PID=$$
_1TMPDIR="$(mktemp -d)"
_1DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
_1RC="$_1DIR/$(basename "${BASH_SOURCE[0]}")"
_1UDATA="$HOME/.norg"
_1VARSDB="$_1UDATA"
_1GDATA="/opt/norg"

if [ "$_1DIR" = "/usr/bin" ]
then
	_1LIB="/usr/lib/norg"
	_1DOC="/usr/share/doc/norg"
elif [ "$_1DIR" = "/usr/local/bin" ]
then
	_1LIB="/usr/local/lib/norg"
	_1DOC="/usr/share/doc/norg"
else
	_1LIB="$_1DIR/lib"
	_1DOC="$_1DIR/doc"
fi
_1DBDIR="$_1UDATA/database"
# Spool of messages, when it can't be show imediatly
_1MSGSPOOL="$_1UDATA/.messages"
_1VRBSPOOL="$_1TMPDIR/nh1_messages.$_1PID"
# Gettext configure
source gettext.sh

# @description Prints message in user language, using Gettext
# @arg $1 string Message in English to translate
_1text() {
	TEXTDOMAINDIR="$_1LIB/locale" gettext 'NH1' "$*"
}


_1COLOR=6
_1PCOLOR=5 # Pending
_1XCOLOR=3 # Experimental
_1WCOLOR=2 # Working
_1DCOLOR=1 # Deprecated
_1IMCOLOR=6 # Info
_1WMCOLOR=3 # Warning
_1EMCOLOR=1 # Error

_1MENUCOL=13
_1VERBOSE=0 # 0 - disabled; 1 - enabled

# @description Set text color in shell
# @example
#    echo "test: $(1tint 6 "Hello World")"
#
# @arg $1 int The color number (optional)
# @arg $2 string Text to color
#
# @exitcode 0 If successful.
# @exitcode 1 If an empty string passed.
1tint() {
	local COLOR MSG

	case "$#" in
		0)
			_1text "You need to put a string and a color number (optional)"
			echo
			1tint 0 "0 $(_1text black)"; echo
			1tint 1 "1 $(_1text red)"; echo
			1tint 2 "2 $(_1text green)"; echo
			1tint 3 "3 $(_1text yellow)"; echo
			1tint 4 "4 $(_1text blue)"; echo
			1tint 5 "5 $(_1text magenta)"; echo
			1tint 6 "6 $(_1text cyan)"; echo
			1tint 7 "7 $(_1text white)"; echo
			return 1
			;;
		1) # param is text
			COLOR=$_1COLOR
			MSG=$1
			;;
		*) # every param after first is text
			COLOR=$1
			shift  
			MSG=$*
			;;
	esac

	tput setaf $COLOR
	echo -n $MSG
	tput sgr0

	return 0
}

# @description Set text background color in shell
# @arg $1 int The color number (optional)
# @arg $2 string Text to color
#
# @exitcode 0 If successful.
# @exitcode 1 If an empty string passed.
1tintb() {
	local COLOR MSG

	case "$#" in
		0)
			_1text "You need to put a string and a color number (optional)"
			echo
			1tintb 0 "0 $(_1text black)"; echo
			1tintb 1 "1 $(_1text red)"; echo
			1tintb 2 "2 $(_1text green)"; echo
			1tintb 3 "3 $(_1text yellow)"; echo
			1tintb 4 "4 $(_1text blue)"; echo
			1tintb 5 "5 $(_1text magenta)"; echo
			1tintb 6 "6 $(_1text cyan)"; echo
			1tintb 7 "7 $(_1text white)"; echo
			return 1
			;;
		1) # param is text
			COLOR=$_1COLOR
			MSG=$1
			;;
		*) # every param after first is text
			COLOR=$1
			shift  
			MSG=$*
			;;
	esac

	tput setab $COLOR
	echo -n $MSG
	tput sgr0

	return 0
}

# @description Proccess message spool
# @arg $1 string Filename to proccess
# @arg $2 string Prefix for every line
_nh1.spool() {
	local SAVEIFS _LIN _PRE
	if [ $# -gt 1 ]
	then
		_PRE="$2"
	else
		_PRE=""
	fi
	SAVEIFS=$IFS
    IFS=$(echo -en "\n\b")
	for _LIN in $(cat "$1")
	do
		echo -n "$_PRE"
		echo "$_LIN"
	done
	IFS=$SAVEIFS
	rm "$1"
	touch "$1"
}

# @description Internal message
# @arg $1 string Type of message: info, warning, error, bg
# @arg $2 string Message to show
_1message() {
	local _TYP
	_TYP="normal"
	if [ $# -eq 2 ]
	then
		_TYP="$1"
		shift
	fi
	if [ $# -eq 1 ]
	then
		case "$_TYP" in
			normal)
				;;
			info)
				1tintb $_IMCOLOR "INFO"
				;;
			warning)
				1tintb $_WMCOLOR "WARNING"
				;;	
			error)
				1tintb $_EMCOLOR "ERROR"
				;;
			bg)
				echo "$*" >> "$_1MSGSPOOL"
				return 0
				;;
		esac
	else
		_nh1.spool "$_1MSGSPOOL" "$(1tintb $_IMCOLOR " > ") "
	fi
	echo " $*"
}

# @description Print only if NH1 is in verbose mode
#
# @arg $1 string Message to print
_1verb() {
	if [ $_1VERBOSE -gt 0 ]
	then
		echo "$(1tint 3 "▲") $(1tint ${FUNCNAME[ 1 ]}): $*"
	fi
}

# @description Spools message to shows when possible
#
# @arg $1 string Message to print
_1verbs() {
	if [ $_1VERBOSE -gt 0 ]
	then
		echo "$(date +%H:%M) ${FUNCNAME[1]}: $*" >> $_1VRBSPOOL
	fi
}

# @description Prints dammed verbose messages
_1verbs.spool() {
	_nh1.spool $_1VRBSPOOL "$(1tint 3 "▲"): "
}

# @description Procedores to do before all user command
_1before() {
	_1message
	_1verbs.spool
}

# @description Run it for all modules
#
# @arg $1 command Replace -=- by module name
_nh1.modrun() {
	local _COMM _MOD _AUX _COUNT
	_COMM="$1"
	_COUNT=0
	_1verb "$(printf "$(_1text "Running for %s")" "$_COMM")"

	for _MOD in "${_1MODULES[@]}"
	do
		_AUX=$(echo "$_COMM" | sed "s/-=-/$_MOD/g")
		
		if [ "$(type -t $_AUX)" = 'function' ]
		then
			#_1verb "$(printf "$(_1text "%s identified as a %s.")\n" "$_AUX" "function")"
			$_AUX
		elif [ "$(type -t $_AUX)" = 'builtin' ]
		then
			#_1verb "$(printf "$(_1text "%s identified as a %s.")\n" "$_AUX" "built-in")"
			eval $_AUX
		elif [ "$(type -t "$(echo "$_AUX" | cut -d\  -f 1)")" = "file" ]
		then
			#_1verb "$(printf "$(_1text "%s identified as a %s.")\n" "$_AUX" "file")"
			eval $_AUX
		else
			_COUNT=$((_COUNT+1))
		fi
	done
	_1verb "$(printf "$(_1text "Done. %i modules not ready for this command.")" $_COUNT)"
}

# IMPORT MODULES
_nh1.modrun "source \"$_1LIB/-=-.bashrc\""

# @description Print a line to build help menu
# @arg $1 char Status of command (W, X, P or D: working, experimental, planning, deprecated)
# @arg $2 string Command name
# @arg $3 string Command description
# @arg $4 string list of commands to check (optional)
# @exitcode 0 If successful.
# @exitcode 1 Some command fail in checking
_1menuitem() {
	if [ $# -gt 2 ]
	then
		# Possible status:
		#  W - working
		#  X - experimental
		#  P - planning
		#  D - deprecated
		local mi_status="$1"
		local mi_comm="$2"
		local mi_csize=${#mi_comm}
		local mi_descr="$3"
		local mi_color=7

		case "$mi_status" in
			"W") mi_color=$_1WCOLOR ;;
			"X") mi_color=$_1XCOLOR ;;
			"P") mi_color=$_1PCOLOR ;;
			"D") mi_color=$_1DCOLOR ;;
		esac

		# If commands not found, abort and don't show this menu item
		if [ $# -gt 3 ]
		then
			if ! 1check -s "${@:4:$#+1}"
			then
				return 1
			fi
		fi

		if [ "$_1VERBOSE" = "1" ] || [ "$mi_status" = 'W' ] || [ "$mi_status" = "X" ]
		then
			local mi_spaces=$(($_1MENUCOL - $mi_csize +2))
			1tint $mi_color "$mi_comm"
			printf ' %.0s' $(seq 1 $mi_spaces)
			echo "$mi_descr"
		fi
	else
		_1message info "$(_1text "You need to give status, command name, message and dependencies")"
	fi
	return 0
}

# @description Print a message inside a banner
# @arg $1 string Width (optional)
# @art $2 string Message
1banner() {
	local _WID _MSG _I _SPB _SPA _MSZ
	# If width is not given, use screen width
	if [ $# -eq 0 ]
	then
		_1message info "$(printf "$(_1text "Usage: 1banner [%s] [%s].")" "$(_1text "size")" "$(_1text "text")")"
		return 0
	fi
	if [ "$#" -ge 2 -a "$1" -eq "$1" ] &> /dev/null
	then
		_WID=$1
		shift
	else
		if 1check tput
		then
			_WID=$(tput cols)
		else
			_WID=40
		fi
		_WID=$((_WID-2))
	fi	
	_MSG="$*"
	_MSZ=${#_MSG}
	_SPA=$(( (_WID - _MSZ) / 2 ))
	_SPB=$((_WID - _MSZ - _SPA))

	1tint "╔"
	1tint "$(printf '═%.0s' $(seq $_WID))"
	1tint "╗"
	echo

	1tint "║"
	printf ' %.0s' $(seq $_SPB)
	echo -n $_MSG
	printf ' %.0s' $(seq $_SPA)
	1tint "║"
	echo

	1tint "╚"
	1tint "$(printf '═%.0s' $(seq $_WID))"
	1tint "╝"
	echo
}

# @description Print menu header
# @arg $1 string Title for menu
_1menuheader() {
	echo -n "       "
	1tint $_1COLOR ".: $* :."
	echo
}

# @description Print a tip in user menu
# @arg $1 string Tip or details
_1menutip() {
	echo -n "       "
	1tint $_1COLOR ".."
	echo " $*"
}

# @description Generic complete function, finding formats
# @arg $1 string 1st file format. 0 for none
# @arg $2 string 2nd file format. 0 for none
# @arg $3 string 3th file format. 0 for none
# @arg $4 string 4th file format. 0 for none
# @arg $5 string 5th file format. 0 for none
_1compl() {
  COMREPLY=()
  local word="${COMP_WORDS[COMP_CWORD]}"
    if [ "$COMP_CWORD" -eq 1 ] && [ $1 != "0" ]
    then
        COMPREPLY=($(compgen -f -X "!*.$1" -- "$word"))
    elif [ "$COMP_CWORD" -eq 2 ] && [ $2 != "0" ]
    then
        COMPREPLY=($(compgen -f -X "!*.$2" -- "$word"))
    elif [ "$COMP_CWORD" -eq 3 ] && [ $3 != "0" ]
    then
        COMPREPLY=($(compgen -f -X "!*.$3" -- "$word"))    
    elif [ "$COMP_CWORD" -eq 4 ] && [ $4 != "0" ]
    then
        COMPREPLY=($(compgen -f -X "!*.$4" -- "$word"))    
    elif [ "$COMP_CWORD" -eq 5 ] && [ $5 != "0" ]
    then
        COMPREPLY=($(compgen -f -X "!*.$5" -- "$word"))    
    fi
}

# @description Returns all internal items of one kind
# @arg $1 string Path
# @arg $2 string File extension
# @arg $3 string exclude extension? (Optional. Default: yes)
# @stdout The list of items
_1list() {
    local fn aux
    for fn in $(ls -1 "$1")
    do        
		if [ $# -gt 2 ]
		then
			echo -n " $fn"
		else
			aux="$(basename  "$fn" ".$2")"
			if [ "$aux" != "$fn" ]
			then
        		echo -n " $aux"
			fi
		fi
    done
}


# @description Run the command as root
# @arg $1 string Command
_1sudo() {
    if [ "$EUID" -eq 0 ]
    then
        $@
    else
        sudo $@
    fi
}

# @description Configure completion for main file and all modules.
# @see _1compl
_nh1.complete() {
	complete -W "$(_1list "$_1LIB/locale" "po")" 1translate
    complete -F _nh1.complete.db 1db
    complete -F _nh1.complete.dbvar 1dbget
    complete -F _nh1.complete.dbvar 1dbset
    complete -F _nh1.complete.dbshow 1dbshow

	_nh1.modrun "_nh1-=-.complete"
}

# @description Autocompletion for 1db
_nh1.complete.db() {
	local _ARG
  	COMREPLY=()
    if [ "$COMP_CWORD" -eq 1 ]
    then
		COMPREPLY=(new del)
	elif [ "$COMP_CWORD" -eq 2 ]
	then
		_ARG=("${COMP_WORDS[1]}");
        if [ "$_ARG" = "del" ]
		then
			COMPREPLY=($(_1list $_1DBDIR "1db"))
		fi
    fi
}

# @description Autocompletion for 1dbget and 1dbget
_nh1.complete.dbvar() {
	local _ARG
  	COMREPLY=()
    if [ "$COMP_CWORD" -eq 1 ]
    then
		COMPREPLY=($(_1list $_1DBDIR "1db"))
	elif [ "$COMP_CWORD" -eq 2 ]
	then
		_ARG=("${COMP_WORDS[1]}");
		COMPREPLY=($(1dbshow "$_ARG" "list"))
    fi
}

# @description Autocompletion for 1dbshow
_nh1.complete.dbshow() {
	local _ARG
  	COMREPLY=()
    if [ "$COMP_CWORD" -eq 1 ]
    then
		COMPREPLY=($(_1list $_1DBDIR "1db"))
	elif [ "$COMP_CWORD" -eq 2 ]
	then
		COMPREPLY=(list show)
    fi
}

# @description Initial functions, configuring and creating dirs
_nh1.init() {
	mkdir -p "$_1UDATA"
	mkdir -p "$_1DBDIR"
	touch "$_1MSGSPOOL"
	touch "$_1VRBSPOOL"

	_nh1.modrun "_nh1-=-.init"
}

# @description Load custom var from config
# @arg $1 string Custom var name
# @arg $2 string Internal var name
# @arg $3 string Type. string or number. Default: string.
_1customvar() {
	local CVVAL
	CVVAL=$(_1db.get "$_1UDATA" "conf" "nh1" "$1")
	if [ $? -eq 0 ]
	then
		if [ $# -gt 2 ]
		then
			if [ "$3" = "number" ]
			then
				eval "$2=\$(($CVVAL*1))"
				return 0
			fi
		fi
		eval "$2=\"$CVVAL\""
		return 0
	fi
}

# @description Apply custom variables to internals
# @see 1info
_nh1.customvars() {
	if [ -f "$_1UDATA/nh1.conf" ]
	then
		_1customvar NORG_VERBOSE _1VERBOSE number
		_1customvar NORG_DB_DIR _1DBDIR
	fi

	_nh1.modrun "_nh1-=-.customvars"
}

# @description Check if a program exists. Finish NH1 if it do not exists.
# @arg $* string Program to check or "-s"
# @exitcode 0 Successful
# @exitcode 1 Fail in one or more checkings
1check() {
	local CFAILS=0
	local SILENT=0
	for PROG in $*
	do
		if [ "$PROG" = "-s" ]
		then
		  SILENT=1
		else
			if [ -z "$(whereis -b -B $(echo $PATH | tr ':' ' ') -f "$PROG" | sed "s/$PROG://")" ]
			then
				if [ $SILENT -eq 1 ]
				then
	        		_1verbs "$(printf "$(_1text "%s is missing for %s")" $PROG $USER)"
				else
					_1message info "$(printf "$(_1text "Program %s does not exist or it is unavailable for %s.")" $PROG $USER)"
			  fi
				CFAILS=$((CFAILS+1))
			fi
		fi
	done
	if [ $CFAILS -gt 0 ]
	then
		return 1
	else
		return 0
	fi
}

# @description Clean all variables defined by nh1
1clean() {
	_1before

	_1COLOR=1
	_1verb "$(_1text "Destroying all variables...")"

	_nh1.modrun "_nh1-=-.clean"

	rm -rf "$_1TMPDIR"

	unset _1VERSION _1DIR _1RC _1LIB _1COLOR _1VERBOSE _1PCOLOR _1XCOLOR
	unset _1WCOLOR _1DCOLOR _1MENUCOL _1GDATA _1UDATA _1MODULES _1DOC
	unset _1DBDIR _1VARSDB _1PID _1TMPDIR
	unset -f 1help 1tint _1sudo 1check 1bashrc 1refresh 1update 1version 
	unset -f 1clean 1help _1compl _1list 1translate _nh1.complete _nh1.init
	unset -f _nh1.customvars 1info _nh1.modrun 1verbose _1menuitem _1verb
	unset -f 1builddoc 1db 1dbget 1dbset _1db _1db.get _1db.set _1customvar
	unset -f _nh1info.customizable _1db.show 1dbshow _1menuheader _1menutip
	unset -f _nh1info.customvars _1vardb.init _1vardb.get _1vardb.set
	unset -f _nh1.complete.db _nh1.complete.dbvar _nh1.complete.dbshow
	unset -f 1tintb _1vardb.show _1message _nh1.spool _1verbs.spool _1verbs
	unset -f _1before 1banner

	# Keep isolated to prevent improper extraction
	unset -f _1text 
}

# @description Menu for NH1.
# @see _1menuitem
1help() {
	_1before

	local _MOD
    1banner 60 "NH1 $_1VERSION"

		# Load internal menus
		_nh1.modrun _nh1-=-.menu
		
		_1menuheader "$(_1text "Main")"
		_1menuitem W 1banner "$(_1text "Prints a header inside a banner.")"
		_1menuitem W 1bashrc "$(_1text "Modify .bashrc to NH1 starts on bash start")"
		_1menuitem W 1builddoc "$(_1text "Build documentation files for NH1")" shdoc
		_1menuitem W 1clean "$(_1text "Clean NH1 from memory (undo NH1 charge)")"
		_1menuitem W 1db "$(_1text "List, create or delete a internal key-value DB.")"
		_1menuitem W 1dbget "$(_1text "Get a value from a DB variable.")"
		_1menuitem W 1dbset "$(_1text "Set in DB a value for a variable.")"
		_1menuitem W 1dbshow "$(_1text "List all variables in a DB.")"
		_1menuitem W 1info "$(_1text "List possible custom variables")"
		_1menuitem W 1tint "$(_1text "Write a string in another color")"
		_1menuitem W 1tintb "$(_1text "Write a string with background color")"
		_1menuitem W 1translate "$(_1text "Create and apply translation for NH1.")"
		_1menuitem W 1update "$(_1text "Update your NH1, using git")" git
		_1menuitem W 1verbose "$(_1text "Enable/disable verbose mode")"
		_1menuitem W 1version "$(_1text "List NH1 version and latest changes/updates")"

		echo
		echo -n "   "
		1tint $_1PCOLOR $(_1text "planning")
		echo -n "   "
		1tint $_1XCOLOR $(_1text "experimental")
		echo -n "   "
		1tint $_1WCOLOR $(_1text "working")
		echo -n "   "
		1tint $_1DCOLOR $(_1text "deprecated")
		echo
		echo " -------------------------------------"
		echo "         $(_1text "Power-up your shell")"
		echo " -------------------------------------"
    echo
}

# @description Modify ~/.bashrc to init NH1 on bash start
1bashrc() {
	_1before

    local S1="source $_1RC"
    if grep "$S1" ~/.bashrc > /dev/null
    then
      _1text "NH1 is already installed in your profile. Run NH1 to see all commands available."
    else
		printf "$(_1text "Installing NH1 in %s...")\n" "$HOME/.bashrc"
    	echo "$S1" >> ~/.bashrc
			_1text "Done!"
    fi
}

# @description Reload NH1 and all related modules
1refresh() {
	_1before

	local LOCAL1RC=$_1RC
	_1verb "$(printf "$(_1text "After destroy variables, I will load %s.")" $_1RC)"
	1clean
	source "$LOCAL1RC"
	_1verb $(_1text "Done!")
}

# @description Update NH1 based in git repository
1update() {
	_1before

	if 1check git
	then
		pushd "$_1LIB/.." || return 1
		if [ -d ".git" ]
		then
			printf "$(_1text "NH1 was in version %s. ")" $_1VERSION
			git pull
			1refresh
			1version
			echo
		else
			_1text "You are using NH1 from tar-ball, not from Git."
		fi
		popd || return 2			
	else
		_1text "Git program is not available."
	fi
}

# @description List software version and list latest entries from changelog
1version() {
	echo "NH1 $_1VERSION"
	echo
	tail "$_1LIB/changelog.txt"
}

# @description Enable or disable verbose mode
# @arg $1 int Bit (0/1) to set verbose mode. Default: invert current. (Optional)
# @see _1verb
1verbose() {
	local NEWV=$_1VERBOSE
	if [ $# -eq 1 ]
	then
		if [ $1 -eq 1 ]
		then
			_1VERBOSE=1
			_1verb "$(_1text "Verbose mode is on")"
		else
			_1verb "$(_1text "Verbose mode is off")"
			_1VERBOSE=0
		fi
		return
	fi
	# invert verbose
	if [ $NEWV -eq 1 ]
	then
		_1verb "$(_1text "Verbose mode is off")"
		_1VERBOSE=0
	else
		_1VERBOSE=1
		_1verb "$(_1text "Verbose mode is on")"
	fi
}

# @description Creates and applies translation for NH1
# @arg $1 string Language code
# @arg $2 string Generate binaries. Optional. Default: none
# @see _1text
1translate() {
	_1before

	local AUX
	case "$#" in
		1)
			_1verb "$(_1text "Generating translation file.")"
			pushd "$_1LIB" > /dev/null
			# Generate pot file for all modules
			xgettext -o "locale/NH1.pot" -L Shell --keyword --keyword=_1text \
				"$_1RC" $(echo ${_1MODULES[@]}' ' | sed 's/ /.bashrc /g') \
				$(_nh1app.avail | xargs -n 1 | sed 's/^\(.*\)$/recipes\/\1.app/g')
			_1verb "$(_1text ".pot file generated. Trying to create/update .po")"
			if [ -f "locale/$1.po" ]
			then
				msgmerge -U "locale/$1.po" "locale/NH1.pot"
			else
				msginit -o "locale/$1.po" -l "$1" -i "locale/NH1.pot"
			fi
			_1verb "$(_1text "Done!")"
			popd > /dev/null
			;;
		2)
			AUX="$_1LIB/locale/$1/LC_MESSAGES"
			mkdir -p "$AUX"
			_1verb "$(printf "$(_1text "Generating .mo file for %s language")" $1)"
			msgfmt -o "$AUX/NH1.mo" "$_1LIB/locale/$1.po"
			_1verb "$(_1text "Done!")"
			;;
		*)
			printf "$(_1text "Usage: %s.")\n" "1translate <language-code> [compile]"
			printf "$(_1text "Steps to translate"):\n"
			printf "  1) $(_1text "Run 1translate <language-code>. For example, 1translate pt_BR");\n"
			printf "  2) $(_1text "Edit the file <language-code>.po in %s, puting the translated strings");\n" "$_1LIB/locale"
			printf "  3) $(_1text "Run 1translate <language-code> build. This will generate .mo file. \"build\" can be replaced to anything");\n"
			printf "  4) $(_1text "Enjoy NH1 in your language! It's useful if you return translated .po to improve NH1 project!").\n"
			;;
	esac
}

# @description Information about user variables
_nh1info.customizable() {
	local _OLDMC
	_1menuheader "$(_1text "Custom variables")"
	printf "$(_1text "You can configure custom variables for NH1. Edit %s to define it.")\n" "$_1UDATA/nh1.conf"

	_OLDMC=$_1MENUCOL
	_1MENUCOL=25

	_1menuitem W NORG_DB_DIR "$(_1text "Path to internal key-value databases")"
	_1menuitem W NORG_VERBOSE "$(_1text "Set verbose mode (1 or 0). Default: 0")"
	
	_nh1.modrun "_nh1-=-.info"

	_1MENUCOL=$_OLDMC
}

# @description Shows user-defined variables
_nh1info.customvars() {
	_1menuheader "$(_1text "Custom variables (in use)")"

	_1db.show "$_1UDATA" "conf" "nh1" 20
}

# @description General information
# @arg $1 string Type of information. Default: all
1info() {
	_1before

	case "$1" in
		customizable)
			_nh1info.customizable
			return 0
			;;
		*)
			printf "$(_1verb "Unknown option: %s.")\n" "$1"
			;;
	esac
	_nh1info.customizable
	_nh1info.customvars
}


# @description Build documentation
1builddoc() {
	_1before

	local _INDEX
	_INDEX="$_1DOC/readme.md"
	if 1check shdoc
	then
    	_1verb "$(printf "$(_1text "Building documentation for nh1 %s...")" "$(_1text "main file")")"
    	shdoc < "$_1RC" > "$_1DOC/nh1.md"
		_1verb "$(printf "$(_1text "Building documentation for nh1 %s...")" "$(_1text "module files")")"    	
		_nh1.modrun "shdoc < \"$_1LIB/-=-.bashrc\" > \"$_1DOC/-=-.md\""
		echo "# NH1 Documentation" > "$_INDEX"
		echo >> "$_INDEX"
		echo "Generated for NH1 $_1VERSION at $(date "+%Y-%m-%d")">> "$_INDEX"
		echo >> "$_INDEX"
		echo "## Index">> "$_INDEX"
		echo >> "$_INDEX"
		echo "* [Main file](nh1.md)">> "$_INDEX"
		_nh1.modrun "echo \"* [-=- module](-=-.md)\" >> \"$_1DOC/readme.md\""
		printf "$(_1text "Documentation available in %s.")\n" "$_1DOC"
	fi
}

# @description List or manage a internal key-value database
# @arg $1 string Path for database
# @arg $2 string File extension
# @arg $3 string Command: new or del.
# @arg $4 string Database name
# @exitcode 0 Ok
# @exitcode 1 File exists
# @exitcode 2 File not exists
# @exitcode 3 Wrong usage
_1db() {
	local DBPATH DBEXT OPER DBNAME
	DBPATH="$1"
	DBEXT="$2"
	OPER="$3"
	DBNAME="$4"

	if [ $# -eq 4 ]
	then
		if [ "$OPER" = "new" ]
		then
			_1verb "$(printf "$(_1text "Creating database file for %s.")\n" "$DBNAME")"
			if [ ! -f "$DBPATH/$DBNAME.$DBEXT" ]
			then
				touch "$DBPATH/$DBNAME.$DBEXT"
				return 0
			else
				printf "$(_1text "Database %s exists.")\n" "$DBNAME"
				return 1
			fi
		elif [ "$OPER" = "del" ]
		then
			_1verb "$(printf "$(_1text "Excluding database file for %s.")\n" "$DBNAME")"
			if [ -f "$DBPATH/$DBNAME.$DBEXT" ]
			then
				rm "$DBPATH/$DBNAME.$DBEXT"
				return 0
			else
				printf "$(_1text "Database %s does not exist.")\n" "$DBNAME"
				return 2
			fi
		fi
	fi
	return 3
}

# @description Get value for some saved variable
# @arg $1 string Path for database
# @arg $2 string File extension
# @arg $3 string Database name
# @arg $4 string Variable name
# @arg $5 string Silent mode (optional)
# @exitcode 0 Ok
# @exitcode 1 Var not found
# @exitcode 2 File not found
# @exitcode 3 Wrong usage
_1db.get() {
	local DBPATH DBEXT DBNAME VARNAME LIN
	DBPATH="$1"
	DBEXT="$2"
	DBNAME="$3"
	VARNAME="$4"
	if [ $# -ge 4 ]
	then
		if [ -f "$DBPATH/$DBNAME.$DBEXT" ]
		then
			LIN=$(grep "^$VARNAME=" "$DBPATH/$DBNAME.$DBEXT")
			if [ $? -eq 0 ]
			then
				if [ $# -eq 4 ]
				then
					echo "$LIN" | sed "s/$VARNAME=\(.*\)/\1/"
				fi
				return 0
			else
				_1verb "$(printf "$(_1text "Variable %s not found in database %s.")\n" "$VARNAME" "$DBNAME")"
				return 1
			fi
		else
			_1verb "$(printf "$(_1text "Database %s not found.")\n" "$DBNAME")"
			return 2
		fi
	fi
	return 3
}

# @description Set value for a variable
# @arg $1 string Path for database
# @arg $2 string File extension
# @arg $3 string Database name
# @arg $4 string Variable name
# @arg $5 string Value
# @exitcode 0 Ok
# @exitcode 1 File not found
# @exitcode 2 Wrong usage
_1db.set() {
	local DBPATH DBEXT DBNAME VARNAME VARVALUE LIN AUX
	DBPATH="$1"
	DBEXT="$2"
	DBNAME="$3"
	VARNAME="$4"
	VARVALUE="$5"
	AUX="$(mktemp -u)"
	if [ $# -ge 4 ]
	then
		if [ -f "$DBPATH/$DBNAME.$DBEXT" ]
		then
			grep -v "^$VARNAME=" "$DBPATH/$DBNAME.$DBEXT" > "$AUX"
			mv "$AUX" "$DBPATH/$DBNAME.$DBEXT"
			if [ $# -gt 4 ]
			then
				echo "$VARNAME=$VARVALUE" >> "$DBPATH/$DBNAME.$DBEXT"
			fi
			return 0
		else
			_1verb "$(printf "$(_1text "Database %s not found.")\n" "$DBNAME")"
			return 1
		fi
	fi
	return 2
}

# @description List all variables in a DB
# @arg $1 string Path for database
# @arg $2 string File extension
# @arg $3 string Database name
# @arg $4 int Size of variable column (optional. Default: 10)
# @arg $4 string If value is "list", it works lik _1list
# @exitcode 0 Ok
# @exitcode 1 File not found
# @exitcode 2 Wrong usage
_1db.show() {
	local DBPATH DBEXT DBNAME AUXVAR AUXVAL LINE OLDMC MODE
	DBPATH="$1"
	DBEXT="$2"
	DBNAME="$3"
	OLDMC=$_1MENUCOL
	MODE="show"
	if [ $# -gt 3 ]
	then
		if [ "$4" = "list" ]
		then
			MODE="list"
		else
			_1MENUCOL=$4
		fi
	else
		_1MENUCOL=10
	fi
	SAVEIFS=$IFS
    IFS=$(echo -en "\n\b")
	if [ "$MODE" = "show" ]
	then
		_1verb "$(printf "$(_1text "Listing content for %s database.")\n" "$DBNAME")"
	fi
    for LINE in $(sort "$DBPATH/$DBNAME.$DBEXT")
	do
		AUXVAR=$(echo "$LINE" | sed 's/\([a-zA-Z0-9\-_\+]*\)=\(.*\)/\1/')
		if [ "$MODE" = "show" ]
		then
			AUXVAL=$(echo "$LINE" | sed 's/\([a-zA-Z0-9\-_\+]*\)=\(.*\)/\2/')
			_1menuitem W $AUXVAR "$AUXVAL"
		else
			echo -n "$AUXVAR "
		fi
	done
	_1MENUCOL=$OLDMC
   	IFS=$SAVEIFS	
}

# @description List or manage a internal key-value database
# @arg $1 string Command: new or del (optional).
# @arg $2 string Database name (optional)
# @exitcode 0 Ok
# @exitcode 1 File exists
# @exitcode 2 File not exists
1db() {
	_1before

	if [ $# -eq 2 ]
	then
		_1db "$_1DBDIR" "1db" "$1" "$2"
		return $?
	else
		printf "$(_1text "Internal databases:%s.")\n" "$(_1list "$_1DBDIR" "1db")"
		echo "---"
		_1text "Usage: "
		printf "1db - %s\n" "$(_1text "list all databases.")"
		printf "1db new [%s] - %s\n" "$(_1text "name")" "$(_1text "creates a new database.")"
		printf "1db del [%s] - %s\n" "$(_1text "name")" "$(_1text "removes the database.")"
		return 0
	fi
}

# @description Get a value from internal key-valeu database
# @arg $1 string Database name
# @arg $2 string Variable name
1dbget() {
	_1before 

	if [ $# -eq 2 ]
	then
		_1db.get "$_1DBDIR" "1db" "$1" "$2"
		return $?
	else
		_1text "Usage: "
		printf "1dbget [%s] [%s]\n" "$(_1text "database name")" "$(_1text "variable name")"
		return 0
	fi
}

# @description Set a value from internal key-valeu database
# @arg $1 string Database name
# @arg $2 string Variable name
# @arg $3 string Variable value
1dbset() {
	_1before

	local DBNAME VARNAME
	DBNAME="$1"
	VARNAME="$2"
	if [ $# -ge 3 ]
	then
		shift 2
		_1db.set "$_1DBDIR" "1db" "$DBNAME" "$VARNAME" "$*"
		return $?
	else
		_1text "Usage: "
		printf "1dbset [%s] [%s] [%s]\n" "$(_1text "database name")" "$(_1text "variable name")" "$(_1text "variable value")"
		return 0
	fi
}

# @description Shows all variables for a database
# @arg $1 string Database filename
# @arg $2 string Mode: show or list. Default: show
1dbshow() {
	_1before

	local _PLUS
	_PLUS=""
	if [ "$#" -eq 2 ]
	then
		if [ "$2" = "list" -o "$2" = "show" ]
		then
			_PLUS="$2"
		fi
	fi
	if [ $# -gt 0 ]
	then
		_1db.show "$_1DBDIR" "1db" "$1" $_PLUS
	else
		_1text "Usage: "
		printf "1dbshow [%s] [%s]\n" "$(_1text "database name")" "$(_1text "mode")"
		printf " - $(_1text "Mode: %s or %s. Default: %s.")\n" "list" "show" "show"
	fi
}

# @description initialize var database (internal)
# @arg $1 string Database name
_1vardb.init() {
	touch "$_1VARSDB/$1.vars"
}

# @description returns value for internal var
# @arg $1 string Database name
# @arg $2 string Variable name
_1vardb.get() {
	_1db.get "$_1VARSDB" "vars" "$1" "$2"
	return $?
}

# @description Sets a value for internal var
# @arg $1 string Database name
# @arg $2 string Variable name
# @arg $3 string Value
_1vardb.set() {
	_1db.set "$_1VARSDB" "vars" "$1" "$2" "$3"
	return $?
}

# @description Shows all saved vars for db
# @arg $1 string Database name
# @arg $2 string Mode: list or show. Default: show
_1vardb.show() {
	local _PLUS
	_PLUS=""
	if [ "$#" -eq 2 ]
	then
		if [ "$2" = "list" -o "$2" = "show" ]
		then
			_PLUS="$2"
		fi
	fi
	_1db.show "$_1VARSDB" "vars" "$1" "$_PLUS"
	return $?
}

# @section Main Section

# Try to execute a `return` statement,
# but do it in a sub-shell and catch the results.
# If this script isn't sourced, that will raise an error.

_nh1.customvars
_nh1.init

if [ $# -gt 0 ]
then
	_1RUN=1$1
	shift
	$_1RUN $@
	unset _1RUN
else

	_nh1.complete

	if return >/dev/null 2>&1
	then
		S1="source $_1RC"
		if ! grep "$S1" ~/.bashrc > /dev/null
		then
			1help
		fi
		unset S1
	else
			printf "$(_1text "You need run: source %s.")\n" "$_1RC"
			return 0
	fi
fi