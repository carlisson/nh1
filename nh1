#!/bin/bash

shopt -s expand_aliases

# GLOBALS
_1VERSION=0.38

_1DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
_1RC="$_1DIR/$(basename "${BASH_SOURCE[0]}")"
_1UDATA="$HOME/.norg"
_1GDATA="/opt/norg"
if [ "$_1DIR" = "/usr/bin" ]
then
	_1LIB="/usr/lib/norg"
elif [ "$_1DIR" = "/usr/local/bin" ]
then
	_1LIB="/usr/local/lib/norg"
else
	_1LIB="$_1DIR/lib"
fi
_1LOCAL="$_1UDATA/local"
_1REMOTE="$_1UDATA/remote"
_1PLUS="$_1UDATA/plus"

_1REMPORT=8097
_1REMFILE="$_1UDATA/servers.list"
if [ ! -f "$_1REMFILE" ]
then
	touch "$_1REMFILE"
fi
_1REMLIST=$(cat "$_1REMFILE")

_1COLOR=6
_1PCOLOR=5 # Pending
_1XCOLOR=3 # Experimental
_1WCOLOR=2 # Working
_1DCOLOR=1 # Deprecated

_1MENUCOL=13
_1VERBOSE=0 # 0 - disabled; 1 - enabled

#STARTING
mkdir -p "$_1LOCAL"
mkdir -p "$_1REMOTE"
mkdir -p "$_1PLUS"

# IMPORT MODULES
source "$_1LIB/app.bashrc"
source "$_1LIB/audio.bashrc"
source "$_1LIB/misc.bashrc"
source "$_1LIB/network.bashrc"
source "$_1LIB/remote.bashrc"
source "$_1LIB/rpg.bashrc"

# Print a line to build help menu
# @param Status of command
# @param Command name
# @param Command description
# @param (optional) list of commands to check
function _1menuitem {
	if [ $# -gt 2 ]
	then
		# Possible status:
		#  W - working
		#  X - experimental
		#  P - planning
		#  D - deprecated
		local mi_status="$1"
		local mi_comm="$2"
		local mi_csize=${#mi_comm}
		local mi_descr="$3"
		local mi_color=7

		case "$mi_status" in
			"W") mi_color=$_1WCOLOR ;;
			"X") mi_color=$_1XCOLOR ;;
			"P") mi_color=$_1PCOLOR ;;
			"D") mi_color=$_1DCOLOR ;;
		esac

		if [ $# -gt 3 ]
		then
			if ! 1check -s "${@:4:$#+1}"
			then
				return
			fi
		fi
		local mi_spaces=$(($_1MENUCOL - $mi_csize +2))
		1tint $mi_color "$mi_comm"
		printf ' %.0s' $(seq 1 $mi_spaces)
		echo "$mi_descr"
	else
		echo "You need to give status, command name, message and dependencies"
	fi
}

# Menu for NH1
function NH1 {

		echo " -------------------------------------"
		echo -n "            "
    1tint "NH1 $_1VERSION"
		echo
		echo " -------------------------------------"
    echo

		_nh1app.menu
		_nh1audio.menu
		_nh1misc.menu
		_nh1network.menu
		_nh1remote.menu
		_nh1rpg.menu

		echo "___ Main ___"
		_1menuitem W 1bashrc "Modify .bashrc to NH1 starts on bash start"
		_1menuitem W 1clean "Clean NH1 from memory (undo NH1 charge)"
		_1menuitem W 1tint "Write a string in another color"
		_1menuitem W 1update "Update your NH1, using git" git
		_1menuitem X 1verbose "Enable/disable verbose mode"
		_1menuitem W 1version "List NH1 version and latest changes/updates"
		_1menuitem P nh1localnet "to-do"
		_1menuitem P nh1connect "to-do"
		_1menuitem P nh1interactive "to-do"

		echo
		echo -n "   "
		1tint $_1PCOLOR "planning"
		echo -n "   "
		1tint $_1XCOLOR "experimental"
		echo -n "   "
		1tint $_1WCOLOR "working"
		echo -n "   "
		1tint $_1DCOLOR "deprecated"
		echo
		echo " -------------------------------------"
		echo "        Power-up for your shell"
		echo " -------------------------------------"
    echo
}

# Set text color in shell
# @param The color number (optional)
# @param Text to 1tint
function 1tint {
	local COLOR MSG
	if [ $# -eq 0 ]
	then
		echo "You need to put a string and a color number (optional)"
		1tint 0 "0 black"; echo
		1tint 1 "1 red"; echo
		1tint 2 "2 green"; echo
		1tint 3 "3 yellow"; echo
		1tint 4 "4 blue"; echo
		1tint 5 "5 magenta"; echo
		1tint 6 "6 cyan"; echo
		1tint 7 "7 white"; echo
		return 1
	fi
	if [ $# -eq 1 ]
	then
		COLOR=$_1COLOR
		MSG=$1
	else
		COLOR=$1
		MSG=$2
	fi
	tput setaf $COLOR
	echo -n $MSG
	tput sgr0
	return 0
}
alias 1help=NH1


# Print only if NH1 is in verbose mode
# @param Message to print
function _1verb {
	if [ $_1VERBOSE -gt 0 ]
	then
		1tint 3 "â–²"
		echo -n ' '
		1tint ${FUNCNAME[ 1 ]}
		echo ": $1"
	fi
}


# Check if a program exists. Finish NH1 if it do not exists.
# @param Program to check
function 1check {
	local CFAILS=0
	local SILENT=0
	for PROG in $*
	do
		if [ "$PROG" = "-s" ]
		then
		  SILENT=1
		else
			if [ -z "$(whereis -u "$PROG")" ]
			then
				if [ $SILENT -eq 1 ]
				then
	        _1verb "$PROG missing for $USER"
				else
				  echo "Program $PROG does not exist or it is unavailable for $USER."
			  fi
				CFAILS=$((CFAILS+1))
			fi
		fi
	done
	if [ $CFAILS -gt 0 ]
	then
		return 1
	else
		return 0
	fi
}

# Modify ~/.bashrc to init NH1 on bash start
function 1bashrc {
    local S1="source $_1RC"
    if grep "$S1" ~/.bashrc > /dev/null
    then
      echo "NH1 is already installed in your profile. Run NH1 to see all commands available."
    else
			echo -n "Installing NH1 in $HOME/.bashrc... "
    	echo "$S1" >> ~/.bashrc
			echo "Done!"
    fi
}

# Reload NH1 and all related modules
function 1refresh {
	local LOCAL1RC=$_1RC
	_1verb "After destroy variables, I will load $_1RC."
	1clean
	source "$LOCAL1RC"
	_1verb "Done."
}

# Get git credentials to update NH1
function 1update {
	if 1check git
	then
		pushd "$_1LIB/.." || return 1
		git pull
		popd || return 2
		# shellcheck source=/dev/null
		1refresh
		1version
		echo
	fi
}


# List version software and list latest entries from changelog
function 1version {
	echo "NH1 $_1VERSION"
	echo
	tail "$_1LIB/changelog.txt"
}

# Clean all variables set by nh1
function 1clean {
	_1verb "Destroying all variables..."
	unset _1VERSION _1DIR _1RC _1LIB _1LOCAL _1REMOTE _1PLUS _1COLOR _1VERBOSE
	unalias 1help
	unset -f NH1 1tint _1verb 1check 1bashrc 1refresh 1update 1version 1clean
    _nh1app.clean
	_nh1audio.clean
	_nh1misc.clean
	_nh1network.clean
	_nh1remote.clean
	_nh1rpg.clean
}

# Enable or disable verbose mode
# @param (optional) Bit (0/1) to set verbose mode. Default: invvert current
function 1verbose {
	local NEWV=$_1VERBOSE
	if [ $# -eq 1 ]
	then
		if [ $1 -eq 1 ]
		then
			_1VERBOSE=1
			_1verb "Verbose mode is on"
		else
			_1verb "Verbose mode is off"
			_1VERBOSE=0
		fi
		return
	fi
	# invert verbose
	if [ $NEWV -eq 1 ]
	then
		_1verb "Verbose mode is off"
		_1VERBOSE=0
	else
		_1VERBOSE=1
		_1verb "Verbose mode is on"
	fi
}

#MAIN

# Try to execute a `return` statement,
# but do it in a sub-shell and catch the results.
# If this script isn't sourced, that will raise an error.
if return >/dev/null 2>&1
then
	S1="source $_1RC"
	if ! grep "$S1" ~/.bashrc > /dev/null
	then
    NH1
	fi
	unset S1
else
		echo "You need run: source $_1RC"
fi
